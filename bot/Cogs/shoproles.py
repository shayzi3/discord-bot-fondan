import disnake
from disnake.ext import commands
from disnake import SelectOption, CmdInter, ButtonStyle
import sqlite3 as sql
from typing import List, Dict, Optional
import json
        
# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
class ButtonAccepter(disnake.ui.View):
    def __init__(self) -> None:
        self.choice: Optional[bool] = None
        super().__init__(timeout=60.0)
        
    @disnake.ui.button(label='–ö—É–ø–∏—Ç—å', style=ButtonStyle.green)
    async def button1(self, button: disnake.ui.Button, inter: CmdInter) -> None:
        await inter.response.defer()
        
        await inter.send('–ü–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...', ephemeral=True, delete_after=60.0)
        self.choice = True
        self.stop()
        
    @disnake.ui.button(label='–ù–µ –ø–æ–∫—É–ø–∞—Ç—å', style=ButtonStyle.red)
    async def button2(self, button: disnake.ui.Button, inter: CmdInter) -> None:
        await inter.response.defer()
        
        await inter.send('–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', ephemeral=True, delete_after=60.0)
        self.choice = False
        self.stop()


# Dropdawn –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
class SelectShop(disnake.ui.Select):
    def __init__(self, guild: int) -> None:
        self.guild = guild
        
        with sql.connect('projectbot.db') as conn:
            cursor = conn.cursor()
            
            
            # –ü–æ–ª—É—á–∞—é –≤—Å–µ —Ä–æ–ª–∏ {
            info = cursor.execute("SELECT roles FROM rolles{}".format(self.guild)).fetchone()[0]
            info: Dict[str, List[int]] = json.loads(info)
            # }
            
            
            # –ü—Ä–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ —Ä–æ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ {
            if info:
                options: List[SelectOption] = [SelectOption(label=f'–†–æ–ª—å: {name_role} ‚Ä¢ –¶–µ–Ω–∞ {info[name_role][0]}', emoji='üí∏', value=name_role) for name_role in info]
                super().__init__(placeholder='–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π ‚Üì', options=options)
                
            else:
                options: List[SelectOption] = [SelectOption(label='–ü—É—Å—Ç–æ! ', emoji='üßπ', value='False')]
                super().__init__(placeholder='–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π ‚Üì', options=options)
        cursor.close()
        # }
        
    async def callback(self, inter: CmdInter) -> None:
        await inter.response.defer()
        values = inter.values[0] # str
       
        
        # –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ Select –æ–∫–Ω–∞ —Å –ª—ç–π–±–ª–æ–º "–ü—É—Å—Ç–æ"
        if values == 'False':
            return await inter.send(f'{inter.author.mention}, —Ä–æ–ª–µ–π –Ω–µ—Ç! –ü–æ–ø—Ä–æ—Å–∏ –º–æ–¥–µ—Ä–æ–≤ —á—Ç–æ–±—ã –æ–Ω–∏ –∏—Ö –¥–æ–±–∞–≤–∏–ª–∏.', ephemeral=True, delete_after=30.0)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ {
        view = ButtonAccepter()
        await inter.send('–ü–æ—Ç–¥–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.', view=view, ephemeral=True, delete_after=60.0)
        await view.wait()
        # }
            
            
        # –ü—Ä–æ–≤–µ—Ä—é –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∞—é—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {
        if view.choice:
            for val in inter.author.roles:
                if values == val.name:
                    return await inter.send('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å!', ephemeral=True, delete_after=30.0)
        # }    
                
                
            with sql.connect('projectbot.db') as conn:
                cursor = conn.cursor()
            
                        
                # –ó–∞–±–∏—Ä–∞—é –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —Å —Ä–æ–ª—è–º–∏ {
                balance = cursor.execute("SELECT cash FROM server{} WHERE id = ?".format(self.guild), [inter.author.id]).fetchone()[0]
                info = cursor.execute("SELECT roles FROM rolles{}".format(self.guild)).fetchone()[0]
                info = json.loads(info)
                # }
                        
                        
                # –ü—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {
                if balance < info[values][0]:
                    return await inter.author.send('–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ä–æ–ª–∏!')
                        
                        
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–∫—É–ø–∫—É, –≤—ã–¥–∞—é —Ä–æ–ª—å
                cursor.execute("UPDATE server{} SET cash = cash - ? WHERE id = ?".format(self.guild), [info[values][0], inter.author.id])
                conn.commit()
                            
                role = disnake.utils.get(inter.guild.roles, id=info[values][1])
                await inter.author.add_roles(role)
                            
                            
                # –£–¥–∞–ª—è—é —Ä–æ–ª—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–Ω–æ—à—É —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–¥ {
                del info[values]
                cursor.execute("UPDATE rolles{} SET roles = ?".format(self.guild), [json.dumps(info)])
                conn.commit()
                # }
                            
                await inter.send('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞. –†–æ–ª—å –≤—ã–¥–∞–Ω–∞.', ephemeral=True, delete_after=60.0)
                # }
                
           
            
            
    
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
class SelectView(disnake.ui.View):
    def __init__(self, guild: int) -> None:
        super().__init__(timeout=180.0)
        self.add_item(SelectShop(guild))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–≥–∞
class ShopCog(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Ä–æ–ª—è–º–∏
    @commands.slash_command(description='–ú–∞–≥–∞–∑–∏–Ω –†–æ–ª–µ–π')
    async def buyrole(self, inter: CmdInter) -> None:
        view = SelectView(inter.guild.id)
        await inter.send(view=view, ephemeral=True, delete_after=180.0)
        
        
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω
    @commands.slash_command(description='–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')
    async def shop_add(self, inter: CmdInter, money: int, role: disnake.Role) -> None:
        
        if money <= 0:
            return await inter.send(f'{inter.author.mention}, —Ü–µ–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!', ephemeral=True, delete_after=30.0) 
        
        with sql.connect('projectbot.db') as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ {
            notadd = cursor.execute("SELECT notadd FROM rolles{}".format(inter.guild.id)).fetchone()[0]
            notadd = json.loads(notadd)
            # }
            
            price = cursor.execute("SELECT sale FROM rolles{}".format(inter.guild.id)).fetchone()[0]
            
            
            # –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–∂–Ω–æ –ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å {
            if role.id in notadd:
                return await inter.send(f'{inter.author.mention}, –Ω–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!', ephemeral=True, delete_after=30.0)
            # }
            
            if price > money:
                return await inter.send(f'{inter.author.mention}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–æ–ª–∏ - {price}.', ephemeral=True, delete_after=30.0)
            
            # –ü–æ–ª—É—á–∞—é —Ä–æ–ª—å {
            roles_give = cursor.execute("SELECT roles FROM rolles{}".format(inter.guild.id)).fetchone()[0]
            roles_give: Dict[str, List[int]] = json.loads(roles_give)
            # }
            
            # –î–æ–±–∞–≤–ª—è—é —Ä–æ–ª—å {
            roles_give[role.name] = [money, role.id] # –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é —Ä–æ–ª—å
            cursor.execute("UPDATE rolles{} SET roles = ?".format(inter.guild.id), [json.dumps(roles_give)]) # –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–¥
            conn.commit()
            # }
        
            await inter.send(f'{inter.author.mention}, —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω!', ephemeral=True, delete_after=60.0)
        cursor.close()
        
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {
    @commands.slash_command(description='–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.')
    async def shop_delete(self, inter: CmdInter, role: disnake.Role) -> None:
        
        try:
            
            with sql.connect('projectbot.db') as conn:
                cursor = conn.cursor()
                    
                # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Ä–æ–ª—è–º–∏ {
                roles_give = cursor.execute("SELECT roles FROM rolles{}".format(inter.guild.id)).fetchone()[0]
                roles_give: Dict[str, List[int]] = json.loads(roles_give)
                # }
                    
                # –£–¥–∞–ª—è—é —Ä–æ–ª—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {   
                del roles_give[role.name] # –£–¥–∞–ª—è—é —Ä–æ–ª—å
                cursor.execute("UPDATE rolles{} SET roles = ?".format(inter.guild.id), [json.dumps(roles_give)]) # –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–¥
                conn.commit()
                # }
                    
                await inter.send(f'{inter.author.mention}, —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞!', ephemeral=True, delete_after=60.0)
            cursor.close()
                   
        except Exception as ex:
            await inter.send(f'{inter.author.mention}, —Ç–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!', ephemeral=True, delete_after=30.0)
    # }
    
            
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö
    @commands.slash_command(description='–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω.')
    async def cant_sold(self, inter: CmdInter, role: disnake.Role):
        
        with sql.connect('projectbot.db') as conn:
            cursor = conn.cursor()
                    
            # –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å —Ä–æ–ª—è–º–∏ {
            roles_give = cursor.execute("SELECT notadd FROM rolles{}".format(inter.guild.id)).fetchone()[0]
            roles_give: List[int] = json.loads(roles_give)
            # }
            
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ {
            if role.id not in roles_give:
                
                # –î–æ–±–∞–≤–ª—è—é —Ä–æ–ª—å –≤ —Å–ø–∏—Å–æ–∫ {  
                roles_give.append(role.id) # –î–æ–±–∞–≤–ª—è—é —Ä–æ–ª—å –≤ —Å–ø–∏—Å–æ–∫
                cursor.execute("UPDATE rolles{} SET notadd = ?".format(inter.guild.id), [json.dumps(roles_give)]) # –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–¥
                conn.commit()
                # }
            # }
                await inter.send(f'{inter.author.mention}, —Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö.', ephemeral=True, delete_after=60.0)
                
            # –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ {
            else:
                await inter.send(f'{inter.author.mention}, —Ç–∞–∫–∞—è —Ä–æ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.', ephemeral=True, delete_after=30.0)
            # }
        cursor.close()
        
        
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö
    @commands.slash_command(description='–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å, –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –≤ –º–∞–≥–∞–∑–∏–Ω.')
    async def can_sold(self, inter: CmdInter, role: disnake.Role):
        
        with sql.connect('projectbot.db') as conn:
            cursor = conn.cursor()
            
                    
            # –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã–º–∏ —Ä–æ–ª—è–º–∏ {
            roles_give = cursor.execute("SELECT notadd FROM rolles{}".format(inter.guild.id)).fetchone()[0]
            roles_give: List[int] = json.loads(roles_give)
            # }
            
            
            # –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä–æ–ª—å —É–∂–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ {
            if role.id in roles_give:
                
                # –£–¥–∞–ª—è—é —Ä–æ–ª—å –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {   
                roles_give.remove(role.id) # –£–¥–∞–ª—è—é —Ä–æ–ª—å
                cursor.execute("UPDATE rolles{} SET notadd = ?".format(inter.guild.id), [json.dumps(roles_give)]) # –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–¥
                conn.commit()
                # }
            # }
                await inter.send(f'{inter.author.mention}, —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–≤—ã—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö.', ephemeral=True, delete_after=60.0)
            
            
            # –û—Ç–≤–µ—Ç –µ—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ {
            else:
                await inter.send(f'{inter.author.mention}, —Ç–∞–∫–æ–π —Ä–æ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç!', ephemeral=True, delete_after=30.)
            # }
        cursor.close()
        
        
    @commands.slash_command(description='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä–æ–ª—å.')
    async def min_price(self, inter: CmdInter, price: int):
        
        if price <= 0:
            return await inter.send(f'{inter.author.mention} –Ω–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—É –º–µ–Ω—å—à–µ 0!', ephemeral=True, delete_after=60.0)
        
        with sql.connect('projectbot.db') as conn:
            cursor = conn.cursor()
            
            cursor.execute("UPDATE rolles{} SET sale = ?".format(inter.guild.id), [price])
            conn.commit()
            
            await inter.send(f'{inter.author.mention} –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', ephemeral=True, delete_after=60.0)
        cursor.close()
        
        
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–≥–∞ –≤ –±–æ—Ç–∞ {
def setup(bot: commands.Bot) -> None:
    bot.add_cog(ShopCog(bot))
# }